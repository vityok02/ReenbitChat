@page "/chat"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using ReenbitChatClient.Models
@inject NavigationManager Navigation
@inject TextAnalyticsService TextAnalyticsService

<PageTitle>Chat</PageTitle>

<div class="container mt-4">
    <div class="card shadow-sm">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h4 class="mb-0">Chat Room: @ChatName</h4>
            <button @onclick="Close" class="btn btn-sm btn-outline-secondary">&times;</button>
        </div>
        <div class="card-body">
            <ul id="messages" class="list-unstyled mb-4">
                @foreach (var message in Messages)
                {
                    <li class="mb-2">
                        <strong>@message.UserName</strong>
                        <div class="border rounded p-2" style="background-color:@GetSentimentColor(message.Sentiment?.Sentiment!)">
                            @message.Text
                        </div>
                    </li>
                }
            </ul>
            <div class="input-group">
                <input @bind="messageInput" class="form-control" placeholder="Type your message" />
                <button @onclick="Send" class="btn btn-primary">Send</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string UserName { get; set; }
    [Parameter] public string ChatName { get; set; }
    [Parameter] public List<Message> Messages { get; set; }
    [Parameter] public EventCallback CloseChat { get; set; }

    private string? messageInput;

    private async Task Send()
    {
        if (!string.IsNullOrEmpty(messageInput))
        {
            // Викликаємо метод відправки повідомлення

            // Аналіз настроїв
            var sentiment = await TextAnalyticsService.AnalyzeSentimentAsync(messageInput);

            // Додаємо повідомлення з аналізом настроїв
            Messages.Add(new Message
                {
                    UserName = UserName,
                    Text = messageInput,
                    Sentiment = sentiment != null ? new SentimentAnalysisResult
                    {
                        Sentiment = sentiment.Sentiment.ToString(),
                        PositiveScore = sentiment.PositiveScore,
                        NeutralScore = sentiment.NeutralScore,
                        NegativeScore = sentiment.NegativeScore
                    } : null
                });

            messageInput = string.Empty;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task Close()
    {
        await CloseChat.InvokeAsync();
    }

    // TODO: set bg color by sentiment

    private string GetSentimentColor(string sentiment)
    {
        return sentiment switch
        {
            "Positive" => "green",
            "Negative" => "red",
            "Neutral" => "gray",
            _ => "blue"
        };
    }
}
